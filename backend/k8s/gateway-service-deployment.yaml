apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
  namespace: backcd
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
    spec:
      securityContext:
        runAsUser: 1000  # 컨테이너에서 사용하는 사용자 ID
        runAsGroup: 1000  # 그룹 ID
        fsGroup: 1000     # 볼륨에 접근할 때 사용할 그룹 ID
      initContainers:
        - name: init-apm-agent
          image: curlimages/curl:latest  # Curl 이미지를 사용하여 JAR 파일을 다운로드
          command:
            - "sh"
            - "-c"
            - >
              curl -o /elastic/elastic-apm-agent.jar https://repo1.maven.org/maven2/co/elastic/apm/elastic-apm-agent/1.51.0/elastic-apm-agent-1.51.0.jar;
          volumeMounts:
            - name: elastic-apm-volume
              mountPath: /elastic  # APM 에이전트 파일을 저장할 경로
      containers:
        - name: gateway-service
          image: zlxldgus123/gateway-service:218
          ports:
            - containerPort: 8080
          env:
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: jwt-secret
                  key: secret
            - name: JAVA_TOOL_OPTIONS
              value: "-javaagent:/elastic/elastic-apm-agent.jar -Delastic.apm.service_name=gateway-service -Delastic.apm.server_urls=http://10.96.90.238:8200 -Delastic.apm.application_packages=com.sog"
          volumeMounts:
            - name: elastic-apm-volume
              mountPath: /elastic  # APM 에이전트가 위치할 경로
      volumes:
        - name: elastic-apm-volume
          emptyDir: {}  # 파드 내 임시 디렉터리 사용

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: gateway-service
#   namespace: backcd
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: gateway-service
#   template:
#     metadata:
#       labels:
#         app: gateway-service
#     spec:
#       containers:
#         - name: gateway-service
#           image: zlxldgus123/gateway-service:218
#           ports:
#             - containerPort: 8080
#           env:
#             - name: JWT_SECRET
#               valueFrom:
#                 secretKeyRef:
#                   name: jwt-secret
#                   key: secret
#           resources:
#             requests:
#               memory: "512Mi"
#               cpu: "250m"
#             limits:
#               memory: "1Gi"
#               cpu: "500m"
#           readinessProbe:
#             httpGet:
#               path: /actuator/health/readiness
#               port: 8080
#             initialDelaySeconds: 30
#             periodSeconds: 10
#           livenessProbe:
#             httpGet:
#               path: /actuator/health/liveness
#               port: 8080
#             initialDelaySeconds: 60
#             periodSeconds: 15

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: gateway-service
#   namespace: backcd
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: gateway-service
#   template:
#     metadata:
#       labels:
#         app: gateway-service
#     spec:
#       volumes:
#         - name: elastic-apm-agent
#           emptyDir: {}
#       initContainers:
#         - name: elastic-java-agent
#           image: docker.elastic.co/observability/apm-agent-java:1.52.0
#           volumeMounts:
#             - mountPath: /elastic/apm/agent
#               name: elastic-apm-agent
#           command: ['cp', '-v', '/usr/agent/elastic-apm-agent.jar', '/elastic/apm/agent']
#       containers:
#         - name: gateway-service
#           image: zlxldgus123/gateway-service:218
#           ports:
#             - containerPort: 8080
#           volumeMounts:
#             - mountPath: /elastic/apm/agent
#               name: elastic-apm-agent
#           env:
#             - name: JWT_SECRET
#               valueFrom:
#                 secretKeyRef:
#                   name: jwt-secret
#                   key: secret
#             - name: ELASTIC_APM_SERVER_URLS
#               value: "http://localhost:8200"
#             - name: ELASTIC_APM_SERVICE_NAME
#               value: "gateway-service"
#             - name: ELASTIC_APM_APPLICATION_PACKAGES
#               value: "com.sog"
#             - name: ELASTIC_APM_ENVIRONMENT
#               value: "production"
#             - name: ELASTIC_APM_LOG_LEVEL
#               value: "INFO"
#             - name: ELASTIC_APM_DISABLE_INSTRUMENTATIONS
#               value: "spring-webmvc"
#             - name: ELASTIC_APM_ENABLE_EXPERIMENTAL_INSTRUMENTATIONS
#               value: "true"
#             - name: ELASTIC_APM_REACTOR_INSTRUMENTATION
#               value: "true"
#             - name: ELASTIC_APM_TRACE_METHODS
#               value: "com.sog.gateway.*"
#             - name: JAVA_TOOL_OPTIONS
#               value: "-javaagent:/elastic/apm/agent/elastic-apm-agent.jar -Dspring.main.web-application-type=reactive"
#           resources:
#             requests:
#               memory: "512Mi"
#               cpu: "250m"
#             limits:
#               memory: "1Gi"
#               cpu: "500m"
#           readinessProbe:
#             httpGet:
#               path: /actuator/health/readiness
#               port: 8080
#             initialDelaySeconds: 30
#             periodSeconds: 10
#           livenessProbe:
#             httpGet:
#               path: /actuator/health/liveness
#               port: 8080
#             initialDelaySeconds: 60
#             periodSeconds: 15